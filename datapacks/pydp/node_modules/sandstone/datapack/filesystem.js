"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDirectory = exports.createDirectory = exports.getWorldPath = exports.getMinecraftPath = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
/**
 * Get the .minecraft path
 */
function getMinecraftPath() {
    // eslint-disable-next-line
    const fs = require('fs');
    function getMCPath() {
        switch (os_1.default.platform()) {
            case 'win32':
                return path_1.default.join(os_1.default.homedir(), 'AppData/Roaming/.minecraft');
            case 'darwin':
                return path_1.default.join(os_1.default.homedir(), 'Library/Application Support/minecraft');
            case 'linux':
            default:
                return path_1.default.join(os_1.default.homedir(), '.minecraft');
        }
    }
    const mcPath = getMCPath();
    if (!fs.existsSync(mcPath)) {
        throw new Error('Unable to locate the .minecraft folder. Please specify it manually.');
    }
    return mcPath;
}
exports.getMinecraftPath = getMinecraftPath;
/**
 *
 * @param worldName The name of the world
 * @param minecraftPath The optional location of the .minecraft folder.
 * If left unspecified, the .minecraft will be found automatically.
 */
function getWorldPath(worldName, minecraftPath = undefined) {
    let mcPath;
    // eslint-disable-next-line
    const fs = require('fs');
    if (minecraftPath) {
        mcPath = minecraftPath;
    }
    else {
        mcPath = getMinecraftPath();
    }
    const savesPath = path_1.default.join(mcPath, 'saves');
    const worldPath = path_1.default.join(savesPath, worldName);
    if (!fs.existsSync(worldPath)) {
        const existingWorlds = fs.readdirSync(savesPath, { withFileTypes: true }).filter((f) => f.isDirectory).map((f) => f.name);
        throw new Error(`Unable to locate the "${worldPath}" folder. Word ${worldName} does not exists. List of existing worlds: ${JSON.stringify(existingWorlds, null, 2)}`);
    }
    return worldPath;
}
exports.getWorldPath = getWorldPath;
/**
 * Create a directory.
 */
function createDirectory(directory) {
    // eslint-disable-next-line
    const fs = require('fs');
    // Create the path
    try {
        fs.mkdirSync(directory, { recursive: true });
    }
    catch (e) {
        // Folder already exists
    }
}
exports.createDirectory = createDirectory;
/**
 * Delete a directory.
 */
function deleteDirectory(directory) {
    // eslint-disable-next-line
    const fs = require('fs');
    // Delete the path
    try {
        fs.rmSync(directory, { recursive: true });
    }
    catch (e) {
        // Folder already deleted
    }
}
exports.deleteDirectory = deleteDirectory;
