import type { JSONTextComponent } from "../arguments/index";
import type { ResourcesTree, ResourceTypes } from "./resourcesTree";
declare type SaveFileObject = {
    packType: 'datapack';
    type: ResourceTypes | 'raw';
    rootPath: string;
    relativePath: string;
    content: string;
    saveOptions: SaveOptions;
    resource: any;
};
export declare type CustomHandlerFileObject = Omit<SaveFileObject, 'rootPath'> & {
    rootPath: string | null;
};
export declare type SaveOptions = {
    /**
     * The location of the `.minecraft` folder.
     * If unspecified, the location of the `.minecraft` folder will be automatically discovered.
     */
    minecraftPath?: string;
    /**
     * If true, will display the resulting commands in the console.
     *
     * @default false
     */
    verbose?: boolean;
    /**
     * If true, then nothing will actually be saved to the file system.
     *
     * Used with `verbose`, you can use this option to only print the results of your functions, without saving anything.
     */
    dryRun?: boolean;
    /**
     * The description of the datapack.
     * Corresponds to the `pack.description` property of the `pack.mcmeta` file.
     *
     * Can be a string or a JSON Text Component.
     */
    description?: JSONTextComponent;
    /**
     * The format version of the datapack.
     * Corresponds to the `pack.pack_format` property of the `pack.mcmeta` file.
     *
     * @default 6
     */
    formatVersion?: number;
    /**
     * A custom handler for saving files. If specified, files won't be saved anymore, you will have to handle that yourself.
     */
    customFileHandler?: (fileInfo: CustomHandlerFileObject) => Promise<void> | void;
    /** The indentation to use for all JSON & MCMeta files. This argument is the same than `JSON.stringify` 3d argument. */
    indentation?: string | number;
    /**
     * Whether to put the datapack in the .minecraft/datapacks folder, or not.
     *
     * Incompatible with the `world` and the `customPath` parameters.
     */
    asRootDatapack?: boolean;
    /**
     * The name of the world to save the datapack in.
     *
     * Incompatible with the `asRootDatapack` and the `customPath` parameters.
     */
    world?: string;
    /**
     * A custom path to save the data pack at.
     *
     * Incompatible with the `asRootDatapack` and the `world` parameters.
     */
    customPath?: string;
};
declare type RestrictedSaveOptions = {
    world?: string;
    asRootDatapack?: boolean;
    customPath?: string;
    minecraftPath?: string;
};
export declare function getDestinationPath(name: string, options: RestrictedSaveOptions): string | null;
/**
 * Saves the datapack to the file system.
 *
 * @param functions A mapping between function full names and their commands.
 * @param name The name of the Datapack
 * @param options The save options.
 */
export declare function saveDatapack(resources: ResourcesTree, name: string, options: SaveOptions): Promise<{
    destination: string | null;
}>;
export {};
