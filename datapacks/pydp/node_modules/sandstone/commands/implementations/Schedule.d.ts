import { Command } from "../Command";
import { TagInstance } from "../../resources/Tag";
import type { TimeArgument } from "../../arguments/index";
import type { MCFunctionInstance } from "../../datapack/Datapack";
declare type ScheduledFunction = string | TagInstance<'functions'> | MCFunctionInstance | (() => (void | Promise<void>));
export declare type ScheduleFunction = ((
/**
 * Delays the execution of a function. Executes the function after specified amount of time passes.
 *
 * @param functionName Specify the function, the `MCFunction` or the callback to be scheduled.
 *
 * @param delay Specify the delay time.
 *
 * Must be a time in Minecraft. It must be a single-precision floating point number suffixed with a unit. Units include:
 * - d: an in-game day, 24000 gameticks;
 * - s: a second, 20 gameticks;
 * - t (default and omitable): a single gametick; the default unit.
 *
 * The time is set to the closest integer tick after unit conversion. For example. .5d is same as 12000 ticks.
 *
 * @param type
 * `replace` simply replaces the current function's schedule time. `append` allows multiple schedules to exist at different times.
 * If unspecified, defaults to `replace`.
 */
(functionName: ScheduledFunction, delay: TimeArgument, type?: 'append' | 'replace') => void) & (
/**
 * Delays the execution of a named callback. Executes the function after specified amount of time passes.
 *
 * @param mcFunction Specify the `MCFunction` to be scheduled.
 *
 * @param delay Specify the delay time.
 *
 * Must be a time in Minecraft. It must be a single-precision floating point number suffixed with a unit. Units include:
 * - d: an in-game day, 24000 gameticks;
 * - s: a second, 20 gameticks;
 * - t (default and omitable): a single gametick; the default unit.
 *
 * The time is set to the closest integer tick after unit conversion. For example. .5d is same as 12000 ticks.
 *
 * @param type
 * `replace` simply replaces the current function's schedule time. `append` allows multiple schedules to exist at different times.
 * If unspecified, defaults to `replace`.
 */
(callbackName: string, callback: (() => (void | Promise<void>)), delay: TimeArgument, type?: 'append' | 'replace') => void));
export declare type ClearScheduleFunction = ((
/**
 * Removes a scheduled function.
 *
 * @param functionName Specify the scheduled function or `MCFunction` to be cleared.
 *
 */
(functionName: string | TagInstance<'functions'> | MCFunctionInstance) => void));
export declare class Schedule extends Command {
    clear: ClearScheduleFunction;
    function: ScheduleFunction;
}
export {};
