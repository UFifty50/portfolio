import { Command } from "../Command";
import type { JSONTextComponent, MultipleEntitiesArgument, OBJECTIVE_CRITERION, ObjectiveArgument, OPERATORS } from "../../arguments/index";
import type { DISPLAY_SLOTS } from "../../arguments/displaySlots";
import type { LiteralUnion } from "../../generalTypes";
declare class ScoreboardObjectives extends Command {
    /** List all existing objectives with their display names and criteria. */
    list: () => void;
    /**
     * Create a new objective with the given internal objective name, specified criterion, and the optional display name.
     * All three arguments are case-sensitive.
     *
     * --------------------------------------------------
     * ⚠️ The prefered way is using:
     * ```
     * const objective = Objective.create(...)
     * ```
     * --------------------------------------------------
     *
     * @param objective must be a plain text at most 16 characters.
     *
     * @param criterion must be a valid criterion type.
     *
     * @param displayName must be a JSON text component, defaulting to `objective` when unspecified.
     */
    add: (objective: string, criteria: LiteralUnion<OBJECTIVE_CRITERION>, displayName?: JSONTextComponent | undefined) => void;
    /**
     * Delete all references to the named objective in the scoreboard system.
     * Data is deleted from the objectives list and entity scores,
     * and if it was on a display list it is no longer displayed.
     *
     * --------------------------------------------------
     * ⚠️ The prefered way is using:
     * ```
     * const objective = Objective.create(...)
     * objective.remove()
     * ```
     * --------------------------------------------------
     */
    remove: (objective: ObjectiveArgument) => void;
    /**
     * Display score info for the objective in the given slot.
     *
     * --------------------------------------------------
     * ⚠️ The prefered way is using:
     * ```
     * const objective = Objective.create(...)
     * objective.setDisplay(...)
     * ```
     * --------------------------------------------------
     *
     * @param slot The slot to display the objective in.
     *
     * @param objective The objective to display. If not provided, this display slot is cleared.
     */
    setDisplay: (slot: DISPLAY_SLOTS, objective?: ObjectiveArgument | undefined) => void;
    modify: (
    /**
     * Change the display name of the scoreboard in display slots.
     *
     * --------------------------------------------------
     * ⚠️ The prefered way is using:
     * ```
     * const objective = Objective.create(...)
     * objective.modify(...)
     * ```
     * --------------------------------------------------
     *
     * @param objective The objective to change.
     *
     * @param displayName The new display name. Must be a JSON text component.
     */
    ((objective: ObjectiveArgument, type: 'displayname', displayName?: JSONTextComponent) => void) & 
    /**
     * Change the display format of health bars.
     *
     * --------------------------------------------------
     * ⚠️ The prefered way is using:
     * ```
     * const objective = Objective.create(...)
     * objective.modify(...)
     * ```
     * --------------------------------------------------
     *
     * @param objective The objective to change.
     *
     * @param display Whether to display the health bars as hearts or integers.
     */
    ((objective: ObjectiveArgument, type: 'rendertype', display: 'hearts' | 'integer') => void));
}
declare class ScoreboardPlayers extends Command {
    list: (
    /**
     * Lists all entities which are tracked in some way by the scoreboard system.
     */
    (() => void) & 
    /**
     * Lists the scores of a particular entity.
     *
     * --------------------------------------------------
     * ⚠️ The prefered way is using:
     * ```
     * const player = Selector(...)
     * player.listScores()
     * ```
     * --------------------------------------------------
     *
     * @param target The entity to list the scores from.
     */
    ((target: MultipleEntitiesArgument | number) => void));
    /**
     * Return the scoreboard value of a given objective for a given target.
     *
     * --------------------------------------------------
     * ⚠️ The prefered way is using:
     * ```
     * const objective = Objective.create(...)
     * const player = objective.ScoreHolder(...)
     * player.get()
     * ```
     * --------------------------------------------------
     *
     * @param target The entity to get the score from.
     *
     * @param objective The objective to get the score from.
     */
    get: (target: MultipleEntitiesArgument | number, objective: ObjectiveArgument) => void;
    set: (target: MultipleEntitiesArgument | number, objective: ObjectiveArgument, score: number) => void;
    add: (target: MultipleEntitiesArgument | number, objective: ObjectiveArgument, score: number) => void;
    remove: (target: MultipleEntitiesArgument | number, objective: ObjectiveArgument, score: number) => void;
    reset: (target: MultipleEntitiesArgument | number, objective: ObjectiveArgument) => void;
    enable: (target: MultipleEntitiesArgument | number, objective: ObjectiveArgument) => void;
    operation: (targets: MultipleEntitiesArgument | number, targetObjective: ObjectiveArgument, operation: OPERATORS, source: MultipleEntitiesArgument | number, sourceObjective: ObjectiveArgument) => void;
}
export declare class Scoreboard extends Command {
    /** All commands related to scoreboard objectives. */
    objectives: ScoreboardObjectives;
    /** All commands related to scoreboard players. */
    players: ScoreboardPlayers;
}
export {};
