"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Item = exports.ReplaceItem = exports.ModifyItem = exports.ItemSource = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
const _variables_1 = require("../../variables/index");
class ItemSource extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Replace the slot with a specific item.
         * @param item The item to replace the slot with.
         * @param count The amount of items.
         */
        this.with = (item, count) => { };
        /**
         * Replace the slot with a specific item.
         * @param item The item to replace the slot with.
         * @param count The amount of items.
         */
        this.fromBlock = (...args) => { };
        this.fromEntity = (...args) => { };
        /**
         * Replace the slot with a block or an entity's item
         */
        this.from = {
            block: this.fromBlock,
            entity: this.fromEntity
        };
    }
}
__decorate([
    decorators_1.command('with'),
    __metadata("design:type", Object)
], ItemSource.prototype, "with", void 0);
__decorate([
    decorators_1.command(['from', 'block']),
    __metadata("design:type", Object)
], ItemSource.prototype, "fromBlock", void 0);
__decorate([
    decorators_1.command(['from', 'entity']),
    __metadata("design:type", Object)
], ItemSource.prototype, "fromEntity", void 0);
exports.ItemSource = ItemSource;
class ModifyItem extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * @param pos The position of the container containing the slot to apply the modifier to.
         * @param slot The slot to apply the modifier to.
         * @param modifier The name of the modifier.
         */
        this.block = (pos, slot, modifier) => { };
        /**
         * @param targets The entity/entities containing the slot to apply the modifier to.
         * @param slot The slot to apply the modifier to.
         * @param modifier The name of the modifier.
         */
        this.entity = (targets, slot, modifier) => { };
    }
}
__decorate([
    decorators_1.command(['item', 'modify', 'block'], { isRoot: true, parsers: { '0': _variables_1.coordinatesParser } }),
    __metadata("design:type", Object)
], ModifyItem.prototype, "block", void 0);
__decorate([
    decorators_1.command(['item', 'modify', 'entity'], { isRoot: true }),
    __metadata("design:type", Object)
], ModifyItem.prototype, "entity", void 0);
exports.ModifyItem = ModifyItem;
class ReplaceItem extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * @param pos The position of the container containing the slot to be replaced.
         * @param slot The slot to be replaced.
         */
        this.block = (pos, slot) => new ItemSource(this.commandsRoot);
        /**
         * @param targets one or more entities to modify.
      .
         * @param slot The slot to be replaced.
         */
        this.entity = (targets, slot) => new ItemSource(this.commandsRoot);
    }
}
__decorate([
    decorators_1.command(['item', 'replace', 'block'], { isRoot: true, hasSubcommands: true, executable: false, parsers: { '0': _variables_1.coordinatesParser } }),
    __metadata("design:type", Object)
], ReplaceItem.prototype, "block", void 0);
__decorate([
    decorators_1.command(['item', 'replace', 'entity'], { isRoot: true, hasSubcommands: true, executable: false }),
    __metadata("design:type", Object)
], ReplaceItem.prototype, "entity", void 0);
exports.ReplaceItem = ReplaceItem;
/** Replaces or modifies items in inventories */
class Item extends Command_1.Command {
    constructor() {
        super(...arguments);
        /** Applies a modifier to a slot in an inventory. */
        this.modify = new ModifyItem(this.commandsRoot);
        /** Replaces the content of a specific slot of an inventory with another. */
        this.replace = new ReplaceItem(this.commandsRoot);
    }
}
exports.Item = Item;
