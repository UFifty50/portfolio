"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPromise = exports.isAsyncFunction = void 0;
const util_1 = __importDefault(require("util"));
function isAsyncFunction(func) {
    if (util_1.default.types) {
        // We are in NodeJS, so we can use the builtin check
        return util_1.default.types.isAsyncFunction(func);
    }
    /*
     * We might be in a browser, or another weird environment
     * Try a native way first.
     */
    if (func.constructor.name === 'AsyncFunction') {
        return true;
    }
    // Okay, we need a stronger check.
    const string = func.toString().trim();
    return !!(
    // native
    string.match(/^async /)
        // babel (this may change, but hey...)
        || string.match(/return _ref[^.]*\.apply/));
}
exports.isAsyncFunction = isAsyncFunction;
function isPromise(promise) {
    return promise && typeof promise.then === 'function' && promise[Symbol.toStringTag] === 'Promise';
}
exports.isPromise = isPromise;
