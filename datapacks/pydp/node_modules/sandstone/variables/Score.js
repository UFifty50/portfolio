"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Score = void 0;
const abstractClasses_1 = require("./abstractClasses");
const parsers_1 = require("./parsers");
const Selector_1 = require("./Selector");
function createVariable(datapack, amountOrTargets, objective) {
    const anonymousScore = datapack.Variable();
    if (typeof amountOrTargets === 'number') {
        anonymousScore.set(amountOrTargets);
    }
    else {
        anonymousScore.set(amountOrTargets, objective);
    }
    return anonymousScore;
}
class Score extends abstractClasses_1.ComponentClass {
    constructor(commandsRoot, target, objective) {
        super();
        this._toMinecraftCondition = () => ({
            value: ['unless', 'score', this.target, this.objective.name, 'matches', 0],
        });
        /** INLINE OPERATORS */
        /**
         * Reset the entity's score.
         */
        this.reset = () => {
            this.commandsRoot.scoreboard.players.reset(this.target, this.objective);
        };
        /**
         * Check if the current score matches a certain range.
         *
         * @param range The range to compare the current score against.
         */
        this.matches = (range) => ({
            _toMinecraftCondition: () => ({ value: ['if', 'score', this.target, this.objective, 'matches', parsers_1.rangeParser(range)] }),
        });
        this.commandsRoot = commandsRoot;
        this.target = target;
        this.objective = objective;
    }
    toString() {
        return `${this.target} ${this.objective}`;
    }
    _toChatComponent() {
        return {
            score: { name: this.target, objective: this.objective.name },
        };
    }
    unaryOperation(operation, operator, ...args) {
        var _a;
        if (typeof args[0] === 'number') {
            this.commandsRoot.scoreboard.players[operation](this.target, this.objective, args[0]);
        }
        else if (args[0] instanceof Score) {
            this.commandsRoot.scoreboard.players.operation(this.target, this.objective, operator, args[0].target, args[0].objective);
        }
        else {
            this.commandsRoot.scoreboard.players.operation(this.target, this.objective, operator, args[0], (_a = args[1]) !== null && _a !== void 0 ? _a : this.objective);
        }
        return this;
    }
    binaryOperation(operator, ...args) {
        var _a;
        if (args[0] instanceof Score) {
            this.commandsRoot.scoreboard.players.operation(this.target, this.objective, operator, args[0].target, args[0].objective);
            return this;
        }
        let objective = (_a = args[1]) !== null && _a !== void 0 ? _a : this.objective;
        if (typeof args[0] === 'number') {
            this.commandsRoot.Datapack.registerNewConstant(args[0]);
            objective = 'sandstone_const';
        }
        this.commandsRoot.scoreboard.players.operation(this.target, this.objective, operator, args[0], objective);
        return this;
    }
    set(...args) {
        if (typeof args[0] === 'object' && !(args[0] instanceof Selector_1.SelectorClass) && !(args[0] instanceof Score)) {
            const [data, scale] = args;
            this.commandsRoot.execute.store.result.score(this).run.data.get[data.type](data.currentTarget, data.path, scale !== null && scale !== void 0 ? scale : 1);
            return this;
        }
        return this.unaryOperation('set', '=', ...args);
    }
    add(...args) {
        return this.unaryOperation('add', '+=', ...args);
    }
    remove(...args) {
        return this.unaryOperation('remove', '-=', ...args);
    }
    multiply(...args) {
        return this.binaryOperation('*=', ...args);
    }
    divide(...args) {
        return this.binaryOperation('/=', ...args);
    }
    modulo(...args) {
        return this.binaryOperation('%=', ...args);
    }
    swap(...args) {
        this.binaryOperation('><', ...args);
    }
    plus(...args) {
        const anonymousScore = createVariable(this.commandsRoot.Datapack, this.target, this.objective);
        anonymousScore.unaryOperation('add', '+=', ...args);
        return anonymousScore;
    }
    minus(...args) {
        const anonymousScore = createVariable(this.commandsRoot.Datapack, this.target, this.objective);
        anonymousScore.unaryOperation('remove', '-=', ...args);
        return anonymousScore;
    }
    multipliedBy(...args) {
        const anonymousScore = createVariable(this.commandsRoot.Datapack, this.target, this.objective);
        anonymousScore.binaryOperation('*=', ...args);
        return anonymousScore;
    }
    dividedBy(...args) {
        const anonymousScore = createVariable(this.commandsRoot.Datapack, this.target, this.objective);
        anonymousScore.binaryOperation('/=', ...args);
        return anonymousScore;
    }
    moduloBy(...args) {
        const anonymousScore = createVariable(this.commandsRoot.Datapack, this.target, this.objective);
        anonymousScore.binaryOperation('%=', ...args);
        return anonymousScore;
    }
    /** COMPARISONS OPERATORS */
    comparison(operator, matchesRange, args, invert = false) {
        const playerScore = this;
        const ifOrUnless = invert ? 'unless' : 'if';
        if (typeof args[0] === 'number') {
            return {
                _toMinecraftCondition: () => ({ value: [ifOrUnless, 'score', playerScore.target, playerScore.objective, 'matches', matchesRange] }),
            };
        }
        const endArgs = args[1] ? args : [args[0]];
        return {
            _toMinecraftCondition: () => ({ value: [ifOrUnless, 'score', playerScore.target, playerScore.objective, operator, ...endArgs] }),
        };
    }
    greaterThan(...args) {
        return this.comparison('>', `${typeof args[0] === 'number' ? args[0] + 1 : null}..`, args);
    }
    greaterOrEqualThan(...args) {
        return this.comparison('>=', `${args[0]}..`, args);
    }
    lessThan(...args) {
        return this.comparison('<', `..${typeof args[0] === 'number' ? args[0] - 1 : null}`, args);
    }
    lessOrEqualThan(...args) {
        return this.comparison('<=', `..${args[0]}`, args);
    }
    equalTo(...args) {
        return this.comparison('=', args[0].toString(), args);
    }
    notEqualTo(...args) {
        return this.comparison('=', args[0].toString(), args, true);
    }
}
exports.Score = Score;
