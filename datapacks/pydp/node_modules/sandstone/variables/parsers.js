"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rangeParser = exports.sanitizeValue = exports.rotationParser = exports.coordinatesParser = exports.arrayToArgsParser = void 0;
const Coordinates_1 = require("./Coordinates");
// PARSERS
function arrayToArgsParser(args) {
    if (Array.isArray(args) && args.length === 3) {
        return new Coordinates_1.VectorClass(args.map((arg) => arg.toString()));
    }
    return args;
}
exports.arrayToArgsParser = arrayToArgsParser;
function isRawCoordinates(arg) {
    return Array.isArray(arg) && (arg.length === 3 || arg.length === 2) && arg.every((c) => typeof c === 'string');
}
function isRawRotation(arg) {
    return Array.isArray(arg) && arg.length === 2 && arg.every((c) => typeof c === 'string');
}
function coordinatesParser(coordinates) {
    return isRawCoordinates(coordinates) ? new Coordinates_1.VectorClass(coordinates) : coordinates;
}
exports.coordinatesParser = coordinatesParser;
function rotationParser(rotation) {
    return isRawRotation(rotation) ? new Coordinates_1.VectorClass(rotation) : rotation;
}
exports.rotationParser = rotationParser;
// Sanitize score values. null => '', Infinity => '', any number => itself
const sanitizeValue = (value) => {
    if (value === undefined || value === null) {
        return '';
    }
    if (Number.isFinite(value)) {
        return value.toString();
    }
    // Value is Infinity or -Infinity
    return '';
};
exports.sanitizeValue = sanitizeValue;
// Returns the string representation of a range. [0, null] => '0..', [-Infinity, 5] => '..5', 8 => '8'
const rangeParser = (range) => {
    if (Array.isArray(range)) {
        return `${exports.sanitizeValue(range[0])}..${exports.sanitizeValue(range[1])}`;
    }
    return range.toString();
};
exports.rangeParser = rangeParser;
