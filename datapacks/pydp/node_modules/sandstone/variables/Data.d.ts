import { ConditionTextComponentClass } from "./abstractClasses";
import { Score } from "./Score";
import type { Coordinates, JSONTextComponent, NBTObject, SingleEntityArgument } from "../arguments/index";
import type { DataModifyType, DataModifyValues, StoreType } from "../commands/implementations/index";
import type { Datapack } from "../datapack/index";
export declare type DATA_TYPES = 'entity' | 'block' | 'storage';
export declare type DATA_TARGET = {
    'entity': SingleEntityArgument;
    'block': Coordinates;
    'storage': string;
};
declare type DATA_PATH = string | Record<string, NBTObject> | NBTObject[];
export declare class TargetlessDataInstance<TYPE extends DATA_TYPES = DATA_TYPES> {
    protected datapack: Datapack;
    type: TYPE;
    constructor(datapack: Datapack, type: TYPE);
    target: (target: DATA_TARGET[TYPE]) => DataInstance<TYPE>;
    select: (...path: DATA_PATH[]) => TargetlessDataPointInstance<TYPE>;
}
export declare class TargetlessDataPointInstance<TYPE extends DATA_TYPES = DATA_TYPES> {
    protected datapack: Datapack;
    type: TYPE;
    path: string;
    constructor(datapack: Datapack, type: TYPE, path: DATA_PATH[]);
    target: (target: DATA_TARGET[TYPE]) => DataPointInstance<TYPE>;
    select: (...path: DATA_PATH[]) => TargetlessDataPointInstance<TYPE>;
}
export declare class DataInstance<TYPE extends DATA_TYPES = DATA_TYPES> {
    datapack: Datapack;
    type: TYPE;
    currentTarget: DATA_TARGET[TYPE];
    constructor(datapack: Datapack, type: TYPE, target: DATA_TARGET[TYPE]);
    /**
     * Merge the given NBT to the current target.
     */
    merge: (value: NBTObject) => void;
    target: (target: DATA_TARGET[TYPE]) => DataInstance<TYPE>;
    select: (...path: DATA_PATH[]) => DataPointInstance<TYPE>;
}
export declare class DataPointInstance<TYPE extends DATA_TYPES = DATA_TYPES> extends ConditionTextComponentClass {
    datapack: Datapack;
    type: TYPE;
    path: string;
    currentTarget: DATA_TARGET[TYPE];
    constructor(datapack: Datapack, type: TYPE, target: DATA_TARGET[TYPE], path: DATA_PATH[]);
    target: (target: DATA_TARGET[TYPE]) => DataPointInstance<TYPE>;
    select: (...path: DATA_PATH[]) => DataPointInstance<TYPE>;
    protected modify: (cb: (data: DataModifyType) => DataModifyValues, value: NBTObject | DataPointInstance) => void;
    protected executeStore: (storeType: StoreType, scale: number) => import("../commands/implementations/index").ExecuteWithRun<import("../commands").CommandsRoot>;
    set: (
    /**
     * Set the data point to the given NBT.
     */
    ((value: NBTObject | DataPointInstance) => void) & 
    /**
     * Set the data point to the given score, with a given type and a scale.
     */
    ((value: Score, storeType: StoreType, scale?: number) => void));
    /**
     * Set the data point to the given NBT.
     */
    merge: (value: NBTObject | DataPointInstance) => void;
    /**
     * Append the given NBT to the current data point.
     */
    append: (value: NBTObject | DataPointInstance) => void;
    /**
     * Prepend the given NBT to the current data point.
     */
    prepend: (value: NBTObject | DataPointInstance) => void;
    /**
     * Insert the given NBT to the given index of the current data point.
     */
    insert: (value: NBTObject | DataPointInstance, index: number) => void;
    /**
     * Remove the current NBT value.
     */
    remove: () => void;
    _toMinecraftCondition: () => {
        value: (string | DATA_TARGET[TYPE])[];
    };
    protected _toChatComponent: () => JSONTextComponent;
}
export {};
