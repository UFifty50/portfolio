"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LootTableInstance = void 0;
const env_1 = require("../env");
const Resource_1 = require("./Resource");
class LootTableInstance extends Resource_1.ResourceInstance {
    constructor(datapack, name, lootTable, options) {
        var _a;
        super(datapack, name);
        /** Gives items to players, ignoring empty item stacks. */
        this.give = (players) => this.datapack.commandsRoot.loot.give(players).loot(this.name);
        /**
         * Distributes items to a container block.
         * @param targetPos Specifies the position of a block.
         */
        this.insert = (targetPos) => this.datapack.commandsRoot.loot.insert(targetPos).loot(this.name);
        /**
         * Replace a container block slot with the items.
         * @param targetPos Specifies the position of a block.
         *
         * @param slot Specifies the inventory slot to be modified.
         * Must be must be `container.<slot_number>` where `<slot_number>` is replaced with a number specifying the slot.
         *
         * - Chests, dispensers, droppers, hoppers, and trapped chests are numbered 0 for the top-left slot and then increase
         *   first horizontally, then vertically (so, for example, a chest's top row slots are numbered 0 to 8 from left to right).
         *   Double chests and double trapped chests are treated as two single container blocks.
         * - A brewing stand's bottom slots are numbered 0 to 2 from left to right, its top slot is 3 and the fuel slot is 4.
         * - A furnace's slots are numbered 0 for the input slot, 1 for the fuel slot, and 2 for the output slot.
         *
         * @param count Specifies the number of consecutive slots to be filled. Must be between 0 and 2147483647 (inclusive).
         */
        this.replaceBlock = (targetPos, slot, count) => this.datapack.commandsRoot.loot.replaceBlock(targetPos, slot, count).loot(this.name);
        /**
         * Replace an entity slot with the items.
         *
         * @param targetPos Specifies the position of a block.
         *
         * @param slot Specifies the inventory slot to be modified.
         * Must be must be `container.<slot_number>` where `<slot_number>` is replaced with a number specifying the slot.
         *
         * - Chests, dispensers, droppers, hoppers, and trapped chests are numbered 0 for the top-left slot and then increase
         *   first horizontally, then vertically (so, for example, a chest's top row slots are numbered 0 to 8 from left to right).
         *   Double chests and double trapped chests are treated as two single container blocks.
         * - A brewing stand's bottom slots are numbered 0 to 2 from left to right, its top slot is 3 and the fuel slot is 4.
         * - A furnace's slots are numbered 0 for the input slot, 1 for the fuel slot, and 2 for the output slot.
         *
         * @param count Specifies the number of consecutive slots to be filled. Must be between 0 and 2147483647 (inclusive).
         */
        this.replaceEntity = (entities, slot, count) => this.datapack.commandsRoot.loot.replaceEntity(entities, slot, count).loot(this.name);
        this.lootTableJSON = lootTable;
        datapack.addResource(name, 'loot_tables', { lootTable }, (_a = options === null || options === void 0 ? void 0 : options.onConflict) !== null && _a !== void 0 ? _a : env_1.CONFLICT_STRATEGIES.LOOT_TABLE);
    }
}
exports.LootTableInstance = LootTableInstance;
