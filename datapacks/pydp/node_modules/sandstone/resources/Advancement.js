"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdvancementInstance = void 0;
const env_1 = require("../env");
const Resource_1 = require("./Resource");
class AdvancementInstance extends Resource_1.ResourceInstance {
    constructor(datapack, name, advancement, options) {
        var _a;
        super(datapack, name);
        this.advancementJSON = advancement;
        this.datapack.addResource(name, 'advancements', { advancement }, (_a = options === null || options === void 0 ? void 0 : options.onConflict) !== null && _a !== void 0 ? _a : env_1.CONFLICT_STRATEGIES.ADVANCEMENT);
    }
    /**
     * Grant this advancement to the players.
     */
    grant(players, criterion) {
        this.commandsRoot.advancement.grant(players).only(this.name, criterion);
    }
    /**
     * Revoke this advancement from the players.
     */
    revoke(players, criterion) {
        this.commandsRoot.advancement.revoke(players).only(this.name, criterion);
    }
    /**
     * Grant this advancement and all its parent advancements to the players.
     * Think of specifying everything from the start *until* that advancement.
     *
     * The exact order the operation is carried out in is: `parent > parent's parent > ... > root > this advancement.`
     */
    grantUntilThis(players) {
        this.commandsRoot.advancement.grant(players).until(this.name);
    }
    /**
     * Revoke this advancement and all its parent advancements from the players.
     * Think of specifying everything from the start *until* that advancement.
     *
     * The exact order the operation is carried out in is: `parent > parent's parent > ... > root > this advancement.`
     */
    revokeUntilThis(players) {
        this.commandsRoot.advancement.revoke(players).until(this.name);
    }
    /**
     * Grant this advancement and all its children advancements to the players.
     * Think of specifying everything *from* that advancement to the end.
     *
     * The exact order the operation is carried out in is specified `advancement > child > child's child > ...`.
     * When it operates on a child that branches, it iterates through all its children before continuing.
     */
    grantFromThis(players) {
        this.commandsRoot.advancement.grant(players).from(this.name);
    }
    /**
     * Revoke this advancement and all its children advancements from the players.
     * Think of specifying everything *from* that advancement to the end.
     *
     * The exact order the operation is carried out in is specified `advancement > child > child's child > ...`.
     * When it operates on a child that branches, it iterates through all its children before continuing.
     */
    revokeFromThis(players) {
        this.commandsRoot.advancement.revoke(players).from(this.name);
    }
    /**
     * Grant this advancement, all its parent advancements, and all its children advancements to the players.
     * Think of specifying everything through the specified advancement, going both backwards and forwards.
     *
     * The exact order the operation is as if the command were executed with `until` specified, then with `from` specified:
     * `parent > parent's parent > ... > root > specified advancement > child > child's child > ...`
     */
    grantThroughThis(players) {
        this.commandsRoot.advancement.grant(players).through(this.name);
    }
    /**
     * Revoke this advancement, all its parent advancements, and all its children advancements from the players.
     * Think of specifying everything through the specified advancement, going both backwards and forwards.
     *
     * The exact order the operation is as if the command were executed with `until` specified, then with `from` specified:
     * `parent > parent's parent > ... > root > specified advancement > child > child's child > ...`
     */
    revokeThroughThis(players) {
        this.commandsRoot.advancement.revoke(players).through(this.name);
    }
}
exports.AdvancementInstance = AdvancementInstance;
