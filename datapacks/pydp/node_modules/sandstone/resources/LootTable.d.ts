import { ResourceInstance } from "./Resource";
import type { Coordinates, ENTITY_SLOTS, LootTableJSON, MultipleEntitiesArgument, MultiplePlayersArgument } from "../arguments/index";
import type { BASIC_CONFLICT_STRATEGIES, LiteralUnion } from "../generalTypes";
import type { Datapack } from "../datapack/index";
export declare type LootTableOptions = {
    /**
     * What to do if another LootTable has the same name.
     *
     * - `throw`: Throw an error.
     * - `replace`: Replace silently the old LootTable with the new one.
     * - `ignore`: Keep silently the old LootTable, discarding the new one.
     */
    onConflict?: BASIC_CONFLICT_STRATEGIES;
};
export declare class LootTableInstance extends ResourceInstance {
    lootTableJSON: LootTableJSON;
    constructor(datapack: Datapack, name: string, lootTable: LootTableJSON, options?: LootTableOptions);
    /** Gives items to players, ignoring empty item stacks. */
    give: (players: MultiplePlayersArgument) => void;
    /**
     * Distributes items to a container block.
     * @param targetPos Specifies the position of a block.
     */
    insert: (targetPos: Coordinates) => void;
    /**
     * Replace a container block slot with the items.
     * @param targetPos Specifies the position of a block.
     *
     * @param slot Specifies the inventory slot to be modified.
     * Must be must be `container.<slot_number>` where `<slot_number>` is replaced with a number specifying the slot.
     *
     * - Chests, dispensers, droppers, hoppers, and trapped chests are numbered 0 for the top-left slot and then increase
     *   first horizontally, then vertically (so, for example, a chest's top row slots are numbered 0 to 8 from left to right).
     *   Double chests and double trapped chests are treated as two single container blocks.
     * - A brewing stand's bottom slots are numbered 0 to 2 from left to right, its top slot is 3 and the fuel slot is 4.
     * - A furnace's slots are numbered 0 for the input slot, 1 for the fuel slot, and 2 for the output slot.
     *
     * @param count Specifies the number of consecutive slots to be filled. Must be between 0 and 2147483647 (inclusive).
     */
    replaceBlock: (targetPos: Coordinates, slot: string, count?: number | undefined) => void;
    /**
     * Replace an entity slot with the items.
     *
     * @param targetPos Specifies the position of a block.
     *
     * @param slot Specifies the inventory slot to be modified.
     * Must be must be `container.<slot_number>` where `<slot_number>` is replaced with a number specifying the slot.
     *
     * - Chests, dispensers, droppers, hoppers, and trapped chests are numbered 0 for the top-left slot and then increase
     *   first horizontally, then vertically (so, for example, a chest's top row slots are numbered 0 to 8 from left to right).
     *   Double chests and double trapped chests are treated as two single container blocks.
     * - A brewing stand's bottom slots are numbered 0 to 2 from left to right, its top slot is 3 and the fuel slot is 4.
     * - A furnace's slots are numbered 0 for the input slot, 1 for the fuel slot, and 2 for the output slot.
     *
     * @param count Specifies the number of consecutive slots to be filled. Must be between 0 and 2147483647 (inclusive).
     */
    replaceEntity: (entities: MultipleEntitiesArgument, slot: LiteralUnion<ENTITY_SLOTS>, count?: number | undefined) => void;
}
