"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagInstance = void 0;
const env_1 = require("../env");
const minecraft_1 = require("../datapack/minecraft");
const Resource_1 = require("./Resource");
function isMCFunctionInstance(v) {
    return typeof v === 'function';
}
function isTagObject(v) {
    return typeof v === 'object';
}
function objectToString(value) {
    if (isMCFunctionInstance(value)) {
        return value.name;
    }
    if (isTagObject(value) && isMCFunctionInstance(value.id)) {
        return {
            id: value.id.name,
            required: value.required,
        };
    }
    return value;
}
class TagInstance extends Resource_1.ResourceInstance {
    constructor(datapack, type, name, values = [], replace, options) {
        var _a;
        super(datapack, name);
        this.type = type;
        this.values = values.map(objectToString);
        this.datapack = datapack;
        datapack.resources.addResource('tags', {
            children: new Map(),
            isResource: true,
            path: [this.path.namespace, type, ...this.path.fullPath],
            values: this.values,
            replace,
        }, (_a = options === null || options === void 0 ? void 0 : options.onConflict) !== null && _a !== void 0 ? _a : env_1.CONFLICT_STRATEGIES.TAG);
    }
    get name() {
        return `#${minecraft_1.toMCFunctionName(this.path.fullPathWithNamespace)}`;
    }
    /** Adds a new value to this tag. */
    add(value) {
        this.values.push(objectToString(value));
    }
    toString() {
        return this.name;
    }
}
exports.TagInstance = TagInstance;
