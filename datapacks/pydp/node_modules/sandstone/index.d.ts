export declare const savePack: (name: string, options: import("./datapack/saveDatapack").SaveOptions) => Promise<{
    destination: string | null;
}>, BasePath: <N extends string | undefined, D extends string | undefined>(basePath: import("./index").BasePathOptions<N, D>) => import("./index").BasePathInstance<N, D>, sleep: (delay: import("./index").TimeArgument) => PromiseLike<void>;
export declare const MCFunction: <RETURN extends void | Promise<void>>(name: string, callback: () => RETURN, options?: import("./index").MCFunctionOptions | undefined) => import("./index").MCFunctionInstance<RETURN>, Advancement: <T extends string>(name: string, advancement: import("./index").AdvancementJSON<T>, options?: import("./resources/index").AdvancementOptions | undefined) => import("./index").AdvancementInstance<T>, Predicate: (name: string, predicate: import("./index").PredicateJSON, options?: import("./resources/index").PredicateOptions | undefined) => import("./index").PredicateInstance, Tag: <T extends import("./index").TAG_TYPES>(type: T, name: string, values?: import("./index").TagSingleValue<import(".").HintedTagStringType<T>>[], replace?: boolean | undefined, options?: import("./resources/index").TagOptions | undefined) => import("./index").TagInstance<T>, LootTable: (name: string, lootTable: import("./index").LootTableJSON, options?: import("./resources/index").LootTableOptions | undefined) => import("./index").LootTableInstance, Recipe: <P1 extends string, P2 extends string, P3 extends string>(name: string, recipe: import("./index").RecipeJSON<P1, P2, P3>, options?: import("./resources/index").RecipeOptions | undefined) => import("./index").RecipeInstance<P1, P2, P3>;
export { _ } from "./init";
export * from "./commandsOnly";
export { absolute as abs, local as loc, relative as rel, } from "./index";
export * from "./variables/Coordinates";
export * from "./variables/JSONTextComponentClass";
export * from "./variables/NBTs";
export * from "./variables/Objective";
export * from "./variables/parsers";
export * from "./variables/Score";
export { SelectorClass } from "./variables/Selector";
export declare const Objective: {
    create: (name: string, criteria?: import("./generalTypes").LiteralUnion<import(".").OBJECTIVE_CRITERION>, display?: import("./index").JSONTextComponent | undefined) => import("./init").ObjectiveInstance<string | undefined>;
    get: (name: string) => import("./init").ObjectiveInstance<string | undefined>;
}, Selector: import("./init").SelectorCreator, Data: <TYPE extends import("./variables/Data").DATA_TYPES, TARGET extends import("./variables/Data").DATA_TARGET[TYPE] | undefined = undefined>(type: TYPE, target?: TARGET | undefined) => TARGET extends undefined ? import("./variables/Data").TargetlessDataInstance<import("./variables/Data").DATA_TYPES> : import("./variables/Data").DataInstance<import("./variables/Data").DATA_TYPES>, Variable: ((initialValue?: number | import("./index").Score<string | undefined> | undefined, name?: string | undefined) => import("./index").Score<string | undefined>) & ((nbt: import("./variables/Data").DataPointInstance<import("./variables/Data").DATA_TYPES>, scale?: number | undefined, name?: string | undefined) => import("./index").Score<string | undefined>);
export * from "./arguments/index";
export * from "./datapack/BasePath";
export * from "./datapack/Datapack";
export type { LiteralUnion } from "./generalTypes";
export type { AdvancementInstance, LootTableInstance, MCFunctionOptions, PredicateInstance, RecipeInstance, ResourceInstance, TagInstance, } from "./resources/index";
