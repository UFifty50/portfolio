"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const utils_1 = require("../utils");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
class Watch extends command_1.Command {
    async run() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { args, flags } = this.parse(Watch);
        // First, check if there are any update
        console.log('Checking for updates...');
        const rootFolder = utils_1.getFileFolder('package.json', '.');
        if (!rootFolder) {
            console.error(chalk_1.default `{red Failed to find {bold package.json} in ${path_1.default.resolve()}, or in any parent folder.}`);
            return;
        }
        let npmListReturn;
        try {
            npmListReturn = child_process_1.execSync('npm list --depth 0 --json --silent', {
                cwd: rootFolder,
            }).toString();
        }
        catch ({ stdout }) {
            npmListReturn = stdout.toString();
        }
        const { dependencies } = JSON.parse(npmListReturn);
        const sandstoneOldVersion = (_b = (_a = dependencies === null || dependencies === void 0 ? void 0 : dependencies.sandstone) === null || _a === void 0 ? void 0 : _a.version) !== null && _b !== void 0 ? _b : (_d = (_c = dependencies === null || dependencies === void 0 ? void 0 : dependencies.sandstone) === null || _c === void 0 ? void 0 : _c.required) === null || _d === void 0 ? void 0 : _d.version;
        const cliOldVersion = (_f = (_e = dependencies === null || dependencies === void 0 ? void 0 : dependencies['sandstone-cli']) === null || _e === void 0 ? void 0 : _e.version) !== null && _f !== void 0 ? _f : (_h = (_g = dependencies === null || dependencies === void 0 ? void 0 : dependencies['sandstone-cli']) === null || _g === void 0 ? void 0 : _g.required) === null || _h === void 0 ? void 0 : _h.version;
        const sandstoneNewVersion = child_process_1.execSync('npm view sandstone version').toString().trim();
        const cliNewVersion = child_process_1.execSync('npm view sandstone-cli version').toString().trim();
        const sandstoneNeedsUpdate = sandstoneOldVersion && semver_1.default.lt(sandstoneOldVersion, sandstoneNewVersion);
        const cliNeedsUpdate = cliOldVersion && semver_1.default.lt(cliOldVersion, cliNewVersion);
        if (sandstoneNeedsUpdate) {
            console.log(chalk_1.default `{rgb(229,193,0) Sandstone} has a new version available: {greenBright ${sandstoneNewVersion}} {gray (current: ${sandstoneOldVersion})}`);
        }
        else {
            console.log(chalk_1.default `{rgb(229,193,0) Sandstone} is already up to date!`);
        }
        if (cliNeedsUpdate) {
            console.log(chalk_1.default `{rgb(229,193,0) Sandstone-CLI} has a new version available: {greenBright ${cliNewVersion}} {gray (current: ${cliOldVersion})}`);
        }
        else {
            console.log(chalk_1.default `{rgb(229,193,0) Sandstone-CLI} is already up to date!`);
        }
        let updateSandstone = flags.sandstone && sandstoneNeedsUpdate;
        if (sandstoneNeedsUpdate && !updateSandstone && !flags.skip) {
            updateSandstone = (await inquirer_1.default.prompt({
                name: 'updateSandstone',
                message: chalk_1.default `Update Sandstone to {greenBright ${sandstoneNewVersion}}? >`,
                type: 'confirm',
            })).updateSandstone;
        }
        let updateCli = flags.cli && cliNeedsUpdate;
        if (cliNeedsUpdate && !updateCli && !flags.skip) {
            updateCli = (await inquirer_1.default.prompt({
                name: 'updateCli',
                message: chalk_1.default `Update CLI to {greenBright ${cliNewVersion}}? >`,
                type: 'confirm',
            })).updateCli;
        }
        if (!updateSandstone && !updateCli) {
            return;
        }
        let useYarn = flags.yarn || (fs_extra_1.default.existsSync('yarn.lock') && utils_1.hasYarn() && !flags.npm);
        if (!useYarn && !flags.npm && utils_1.hasYarn() && !fs_extra_1.default.existsSync('package-lock.json')) {
            useYarn = (await inquirer_1.default.prompt({
                name: 'useYarn',
                message: 'What package manager do you want to use? >',
                type: 'list',
                choices: ['npm', 'yarn'],
            })).useYarn === 'yarn';
        }
        const installationMessage = [
            updateSandstone ? 'sandstone' : null,
            updateCli ? 'sandstone-cli' : null,
        ].filter(msg => msg !== null)
            .map(msg => chalk_1.default.rgb(299, 193, 0)(msg))
            .join(', ');
        this.log(chalk_1.default `Installing ${installationMessage} using {cyan ${useYarn ? 'yarn' : 'npm'}}.`);
        if (updateCli) {
            if (useYarn) {
                child_process_1.execSync('yarn add --dev sandstone-cli@latest');
            }
            else {
                child_process_1.execSync('npm install --save-dev sandstone-cli@latest');
            }
            const { onSandstoneUpdate } = require('../onUpdate');
            onSandstoneUpdate(sandstoneOldVersion, sandstoneNewVersion);
        }
        if (updateSandstone) {
            if (useYarn) {
                child_process_1.execSync('yarn add sandstone@latest');
            }
            else {
                child_process_1.execSync('npm install sandstone@latest');
            }
            const { onCliUpdate } = require('../onUpdate');
            onCliUpdate(cliOldVersion, cliNewVersion);
        }
    }
}
exports.default = Watch;
Watch.description = 'Update Sandstone & Sandstone-CLI.';
Watch.examples = [
    '$ sand update',
    '$ sand update --cli',
    '$ sand update --sandstone',
    '$ sand update --cli --sandstone --skip',
];
Watch.flags = {
    help: command_1.flags.help({ char: 'h' }),
    cli: command_1.flags.boolean({ description: 'Update the Sandstone CLI without asking.' }),
    sandstone: command_1.flags.boolean({ description: 'Update the current Sandstone version without asking.' }),
    skip: command_1.flags.boolean({ description: 'Skip all interactive prompts and refuse them.' }),
    yarn: command_1.flags.boolean({ description: 'Use yarn to install the updates.', exclusive: ['npm'] }),
    npm: command_1.flags.boolean({ description: 'Use npm to install the updates.', exclusive: ['yarn'] }),
};
Watch.args = [];
