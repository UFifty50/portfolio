"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const inquirer_1 = __importDefault(require("inquirer"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const package_template_json_1 = __importDefault(require("../package.template.json"));
const utils_1 = require("../utils");
const nanoid_1 = require("nanoid");
function toJson(obj, pretty = false) {
    return util_1.default.inspect(obj, {
        depth: +Infinity,
        colors: false,
        breakLength: +Infinity,
        compact: !pretty,
        maxArrayLength: +Infinity,
    });
}
class Create extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(Create);
        const projectPath = path_1.default.resolve(args['project-name']);
        const projectName = path_1.default.basename(projectPath);
        const datapackName = await utils_1.getFlagOrPrompt(flags, 'datapack-name', {
            message: 'Name of your data pack (can be changed later) >',
            type: 'input',
            default: projectName,
        });
        // Find the save directory
        const saveOptions = {};
        if (flags['save-root']) {
            saveOptions.root = true;
        }
        else if (flags.world) {
            saveOptions.world = flags.world;
        }
        else if (flags['custom-path']) {
            saveOptions.path = flags['custom-path'];
        }
        else {
            // User didn't specify a way to save the file. Ask him.
            const { saveChoice } = await inquirer_1.default.prompt({
                name: 'saveChoice',
                type: 'list',
                message: 'Where do you want your datapack to be saved (can be changed later)?',
                choices: [{
                        name: 'In the root .minecraft/datapacks folder',
                        value: 'root',
                        short: '.minecraft/datapacks folder',
                    }, {
                        name: 'In the datapacks folder of a world',
                        value: 'world',
                        short: 'World datapacks folder',
                    }, {
                        name: 'At a custom path',
                        value: 'path',
                        short: 'Custom path',
                    }],
            });
            if (saveChoice === 'root') {
                saveOptions.root = true;
            }
            else if (saveChoice === 'world') {
                const { world } = await inquirer_1.default.prompt({
                    name: 'world',
                    message: 'What world do you want to save the Datapack in? >',
                    type: 'list',
                    choices: utils_1.getWorldsList,
                });
                saveOptions.world = world;
            }
            else {
                const { path } = await inquirer_1.default.prompt({
                    name: 'path',
                    message: 'Where do you want to save the data pack? Relative paths are accepted. >',
                    type: 'input',
                });
                saveOptions.path = path;
            }
        }
        const namespace = await utils_1.getFlagOrPrompt(flags, 'namespace', {
            message: 'Default namespace (can be changed later) >',
            default: 'default',
        });
        let useYarn = flags.yarn;
        if (!flags.yarn && !flags.npm && utils_1.hasYarn()) {
            useYarn = (await inquirer_1.default.prompt({
                name: 'useYarn',
                message: 'What package manager do you want to use? >',
                type: 'list',
                choices: ['npm', 'yarn'],
            })).useYarn === 'yarn';
        }
        fs_1.default.mkdirSync(projectPath);
        // Create project & install dependencies
        this.log(chalk_1.default `Installing {rgb(229,193,0) sandstone}, {rgb(229,193,0) sandstone-cli} and {cyan typescript} using {cyan ${useYarn ? 'yarn' : 'npm'}}.`);
        if (useYarn) {
            /** Init the package, skipping the interactive prompt */
            child_process_1.execSync('yarn init --yes', { cwd: projectPath });
            /** Install dependencies */
            child_process_1.execSync('yarn add sandstone', { cwd: projectPath });
            child_process_1.execSync('yarn add --dev typescript @types/node sandstone-cli', { cwd: projectPath });
        }
        else {
            /** Init the package, skipping the interactive prompt */
            child_process_1.execSync('npm init --yes', { cwd: projectPath });
            /** Install dependencies */
            child_process_1.execSync('npm install sandstone', { cwd: projectPath });
            child_process_1.execSync('npm install --save-dev typescript @types/node sandstone-cli', { cwd: projectPath });
        }
        // Merge with the package.json template
        const generatedPackage = JSON.parse(fs_1.default.readFileSync(path_1.default.join(projectPath, 'package.json')).toString());
        /** Remove the `main` property */
        const { main: _, ...newPackage } = { ...generatedPackage, ...package_template_json_1.default };
        // Rewrite package.json
        fs_1.default.writeFileSync(path_1.default.join(projectPath, 'package.json'), JSON.stringify(newPackage, null, 2));
        // Add files from template
        const templateFolder = path_1.default.join(__dirname, '../template/');
        await fs_extra_1.default.copy(templateFolder, projectPath);
        // Write the sandstone.json file
        fs_1.default.writeFileSync(path_1.default.join(projectPath, 'sandstone.config.ts'), `import type { SandstoneConfig } from 'sandstone'

export default {
  name: ${toJson(datapackName)},
  description: ${toJson(['A ', { text: 'Sandstone', color: 'gold' }, ' data pack.'])},
  formatVersion: ${6},
  namespace: ${toJson(namespace)},
  packUid: ${toJson(nanoid_1.nanoid(8))},
  saveOptions: ${toJson(Object.fromEntries(Object.entries(saveOptions).filter(([_, value]) => value !== undefined)))},
  onConflict: {
    default: 'warn',
  },
} as SandstoneConfig
`);
        const prefix = useYarn ? 'yarn' : 'npm run';
        this.log(chalk_1.default `{green Success!} Created "${projectName}" at "${projectPath}"`);
        this.log('Inside that directory, you can run several commands:\n');
        this.log(chalk_1.default `  {cyan ${prefix} build}:\n    Builds the data pack. {cyan ⛏}\n`);
        this.log(chalk_1.default `  {cyan ${prefix} watch}:\n    Builds the data pack, and rebuild on each file change. {cyan ⛏}\n`);
        this.log('We suggest that you begin by typing:\n');
        this.log(chalk_1.default `  {cyan cd} ${projectName}\n  {cyan ${prefix} watch}`);
    }
}
exports.default = Create;
Create.description = 'Create a new Sandstone project.';
Create.examples = [
    '$ sand create my-datapack',
];
Create.flags = {
    help: command_1.flags.help({ char: 'h' }),
    yarn: command_1.flags.boolean({ description: 'Use yarn instead of npm.', env: 'USE_YARN', exclusive: ['npm'] }),
    npm: command_1.flags.boolean({ description: 'Use npm.', env: 'USE_NPM', exclusive: ['yarn'] }),
    'datapack-name': command_1.flags.string({ char: 'd', env: 'DATAPACK_NAME', description: 'The name of the data pack.' }),
    namespace: command_1.flags.string({ char: 'n', env: 'NAMESPACE', description: 'The default namespace that will be used.' }),
    'save-root': command_1.flags.boolean({ char: 'r', env: 'SAVE_ROOT', description: 'Save the data pack in the .minecraft/datapacks folder. Not compatible with --world and --custom-path.', exclusive: ['world', 'custom-path'] }),
    world: command_1.flags.string({ char: 'w', env: 'WORLD', description: 'The world to save the data pack in. Not compatible with --save-root and --custom-path.', exclusive: ['save-root', 'custom-path'] }),
    'custom-path': command_1.flags.string({ char: 'p', env: 'CUSTOM_PATH', description: 'The path to save the data pack at. Not compatible with --save-root and --world.', exclusive: ['save-root', 'world'] }),
};
Create.args = [{
        name: 'project-name',
        description: 'Name of the project folder. This is not the name of the data pack.',
        required: true,
    }];
