"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const chokidar_1 = __importDefault(require("chokidar"));
const lodash_debounce_1 = __importDefault(require("lodash.debounce"));
const buildProject_1 = require("../buildProject");
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
const chalk_1 = __importDefault(require("chalk"));
class Watch extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(Watch);
        let alreadyBuilding = false;
        let needRebuild = false;
        let client = null;
        if (flags.autoReload !== undefined) {
            try {
                client = (await require('minecraft-protocol')).createClient({
                    username: 'SandstoneBot',
                    host: 'localhost',
                    port: flags.autoReload,
                });
            }
            catch (e) {
                console.log(chalk_1.default.rgb(255, 204, 0) `Failed to connect to localhost:${flags.autoReload}. The data pack won't be auto reloaded.`);
            }
        }
        const folders = utils_1.getProjectFolders(args.path);
        async function onFileChange() {
            if (alreadyBuilding) {
                // If the pack is already being built & another change was made,
                // notify that a rebuild is needed & stop there
                needRebuild = true;
                return;
            }
            alreadyBuilding = true;
            // Delete the entire cache to prevent artifacts from previous builds
            Object.keys(require.cache).forEach(key => delete require.cache[key]);
            await buildProject_1.buildProject(flags, folders);
            client === null || client === void 0 ? void 0 : client.write('chat', { message: '/reload' });
            alreadyBuilding = false;
            if (needRebuild) {
                needRebuild = false;
                await onFileChange();
            }
        }
        // Register ts-node
        const tsConfigPath = path_1.default.join(folders.rootFolder, 'tsconfig.json');
        require('ts-node').register({
            transpileOnly: !flags.strictErrors,
            project: tsConfigPath,
        });
        chokidar_1.default.watch([
            path_1.default.join(folders.absProjectFolder, '/**/*'),
            path_1.default.join(folders.sandstoneConfigFolder, 'sandstone.config.ts'),
            path_1.default.join(folders.rootFolder, 'package.json'),
            path_1.default.join(folders.rootFolder, 'tsconfig.json'),
        ]).on('all', lodash_debounce_1.default(onFileChange, 200));
    }
}
exports.default = Watch;
Watch.description = 'Build the datapack, and rebuild it on file change. ‚õè';
Watch.examples = [
    '$ sand watch',
    '$ sand watch --verbose',
    '$ sand watch --verbose --dry',
];
Watch.flags = {
    help: command_1.flags.help({ char: 'h' }),
    dry: command_1.flags.boolean({ char: 'd', description: 'Do not save the datapack. Mostly useful with `verbose`.' }),
    verbose: command_1.flags.boolean({ char: 'v', description: 'Log all resulting resources: functions, advancements...' }),
    namespace: command_1.flags.string({ description: 'The default namespace. Override the value specified in the configuration file.' }),
    world: command_1.flags.string({ description: 'The world to save the data pack in. Override the value specified in the configuration file.' }),
    root: command_1.flags.boolean({ description: 'Save the data pack in the `.minecraft/datapacks` folder. Override the value specified in the configuration file.' }),
    path: command_1.flags.string({ description: 'The path to save the data pack at. Override the value specified in the configuration file.' }),
    minecraftPath: command_1.flags.string({ name: 'minecraft-path', description: 'Path of the .minecraft folder. Override the value specified in the configuration file.' }),
    name: command_1.flags.string({ description: 'Name of the data pack. Override the value specified in the configuration file.' }),
    description: command_1.flags.string({ description: 'Description of the data pack. Override the value specified in the configuration file.' }),
    formatVersion: command_1.flags.integer({ name: 'format', description: 'Pack format version. Override the value specified in the configuration file.' }),
    fullTrace: command_1.flags.boolean({ name: 'full-trace', description: 'Show the full stack trace on errors.' }),
    strictErrors: command_1.flags.boolean({ description: 'Stop data pack compilation on type errors.', default: false }),
    production: command_1.flags.boolean({ char: 'p', description: 'Runs Sandstone in production mode. This sets process.env.SANDSTONE_ENV to "production".', default: false }),
    autoReload: command_1.flags.integer({ description: 'Automatically reload your data pack in-game. Requires to open the world to LAN with cheats enabled, and to specify the port.', helpValue: 'port' }),
};
Watch.args = [{
        name: 'path',
        description: 'Path of the folder containing source files.',
        required: true,
        default: './src',
    }, {
        name: 'config-path',
        description: 'Path of the sandstone.config.ts folder.',
        required: true,
        default: '.',
    }];
